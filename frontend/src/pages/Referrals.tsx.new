import { useEffect, useMemo, useState, useCallback } from "react";
import { useToast } from "@/hooks/use-toast";
import { getReferralStats, type ReferralItem, type ReferralStats } from "@/services/referral.service";
import { useAuth } from "@/contexts/AuthContext";
import { useSubscription } from "@/contexts/SubscriptionContext";
import { useNavigate } from "react-router-dom";
import { format } from "date-fns";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import { Copy, Users, Share2, Trophy, Gift, CreditCard, ArrowUpRight, Clock, Check, X, Loader2, AlertCircle } from "lucide-react";
import { PayoutAccountStatus } from "@/components/payouts/PayoutAccountStatus";
import { PayoutHistory } from "@/components/payouts/PayoutHistory";
import { PayoutRequestModal } from "@/components/payouts/PayoutRequestModal";
import { getStripeConnectStatus, initStripeOnboarding, getPayouts, requestPayout } from "@/services/stripeConnect.service";
import { formatCurrency } from "@/lib/utils";

// Types
type PayoutStatus = 'pending' | 'completed' | 'failed' | 'processing';
type StripeConnectStatus = 'not_connected' | 'pending' | 'complete' | 'incomplete';

interface Payout {
  id: string;
  amount: number;
  status: PayoutStatus;
  createdAt: string;
  completedAt?: string;
  currency: string;
  destination: string;
  transferId?: string;
  fee?: number;
  netAmount?: number;
  error?: string;
  type?: 'payout' | 'referral_earning';
  referredUser?: string;
}

interface StripeConnectAccount {
  id: string;
  status: StripeConnectStatus;
  payoutsEnabled: boolean;
  requirements?: {
    currently_due: string[];
    pending_verification: string[];
  };
}

const Referrals = () => {
  const { toast } = useToast();
  const navigate = useNavigate();
  
  const { currentUser } = useAuth();
  const { subscription } = useSubscription();
  const [stats, setStats] = useState<ReferralStats | null>(null);
  const [loading, setLoading] = useState(false);
  const [payoutLoading, setPayoutLoading] = useState(false);
  const [refreshKey, setRefreshKey] = useState(0);
  
  // Payout state
  const [payouts, setPayouts] = useState<Payout[]>([]);
  const [payoutAmount, setPayoutAmount] = useState('');
  const [availableBalance, setAvailableBalance] = useState(0);
  const [isPayoutModalOpen, setIsPayoutModalOpen] = useState(false);
  const [stripeConnectAccount, setStripeConnectAccount] = useState<StripeConnectAccount | null>(null);
  const [isConnectingStripe, setIsConnectingStripe] = useState(false);
  const [isLoadingStripeStatus, setIsLoadingStripeStatus] = useState(true);
  const [minimumPayout, setMinimumPayout] = useState(10); // $10 minimum by default

  // Generate referral link
  const referralLink = useMemo(() => {
    if (!currentUser?.uid) return '';
    return `${window.location.origin}/register?ref=${currentUser.uid}`;
  }, [currentUser?.uid]);

  // Copy text to clipboard
  const copyToClipboard = async (text: string, successMessage = 'Copied to clipboard') => {
    try {
      await navigator.clipboard.writeText(text);
      toast({
        title: successMessage,
        description: 'The content has been copied to your clipboard.',
      });
    } catch (err) {
      console.error('Failed to copy:', err);
      toast({
        title: 'Error',
        description: 'Failed to copy to clipboard',
        variant: 'destructive',
      });
    }
  };

  // Share referral link
  const handleShare = async () => {
    if (!referralLink) return;
    
    try {
      if (navigator.share) {
        await navigator.share({
          title: 'Join me on this awesome platform!',
          text: `Sign up using my referral link and get started today!`,
          url: referralLink,
        });
      } else {
        await copyToClipboard(referralLink, 'Referral link');
      }
      
      // Refresh stats after sharing to ensure we have the latest data
      refreshStats().catch(console.error);
    } catch (err) {
      console.error('Error sharing:', err);
      if (err instanceof Error && err.name !== 'AbortError') {
        await copyToClipboard(referralLink, 'Referral link');
      }
    }
  };

  // Fetch referral stats
  const fetchReferralStats = useCallback(async () => {
    if (!currentUser) return;
    
    setLoading(true);
    try {
      const stats = await getReferralStats();
      setStats(stats);
      
      // Update available balance from stats if available
      if (typeof stats.availableBalance === 'number') {
        setAvailableBalance(stats.availableBalance);
      }
    } catch (error) {
      console.error('Error fetching referral stats:', error);
      toast({
        title: 'Error',
        description: 'Failed to load referral stats',
        variant: 'destructive',
      });
    } finally {
      setLoading(false);
    }
  }, [currentUser, toast]);

  // Refresh stats
  const refreshStats = useCallback(async () => {
    await Promise.all([
      fetchReferralStats(),
      fetchPayouts(),
      fetchStripeConnectStatus()
    ]);
  }, [fetchReferralStats]);

  // Set up polling to refresh stats periodically
  useEffect(() => {
    const interval = setInterval(() => {
      refreshStats().catch(console.error);
    }, 30000); // Refresh every 30 seconds
    
    return () => clearInterval(interval);
  }, [refreshStats]);

  // Fetch Stripe Connect account status
  const fetchStripeConnectStatus = useCallback(async () => {
    if (!currentUser) return;
    
    setIsLoadingStripeStatus(true);
    try {
      const result = await getStripeConnectStatus();
      
      if (result.success && result.account) {
        setStripeConnectAccount(result.account);
      }
    } catch (error) {
      console.error('Error fetching Stripe Connect status:', error);
      toast({
        title: 'Error',
        description: 'Failed to load payment account status',
        variant: 'destructive',
      });
    } finally {
      setIsLoadingStripeStatus(false);
    }
  }, [currentUser, toast]);
  
  // Handle Stripe Connect onboarding
  const handleConnectStripe = async () => {
    if (!currentUser?.email) {
      toast({
        title: 'Error',
        description: 'Please sign in to connect your payment account',
        variant: 'destructive',
      });
      return;
    }
    
    setIsConnectingStripe(true);
    try {
      const result = await initStripeOnboarding(currentUser.email);
      
      // Redirect to Stripe onboarding
      if (result.url) {
        window.location.href = result.url;
      }
    } catch (error) {
      console.error('Error connecting Stripe:', error);
      toast({
        title: 'Error',
        description: error instanceof Error ? error.message : 'Failed to connect payment account',
        variant: 'destructive',
      });
    } finally {
      setIsConnectingStripe(false);
    }
  };
  
  // Fetch payouts and available balance
  const fetchPayouts = useCallback(async () => {
    if (!currentUser) return;
    
    try {
      const result = await getPayouts();
      
      if (result.success) {
        if (result.payouts) {
          setPayouts(result.payouts);
        }
        
        if (result.availableBalance !== undefined) {
          setAvailableBalance(result.availableBalance);
        }
        
        if (result.minimumPayoutAmount) {
          setMinimumPayout(result.minimumPayoutAmount);
        }
      }
    } catch (error) {
      console.error('Error fetching payouts:', error);
      toast({
        title: 'Error',
        description: 'Failed to load payout data',
        variant: 'destructive',
      });
    }
  }, [currentUser, toast]);
  
  // Initial data fetch
  useEffect(() => {
    const fetchData = async () => {
      try {
        await Promise.all([
          fetchReferralStats(),
          fetchPayouts(),
          fetchStripeConnectStatus()
        ]);
      } catch (error) {
        console.error('Error initializing data:', error);
        toast({
          title: 'Error',
          description: 'Failed to load referral data',
          variant: 'destructive',
        });
      }
    };

    fetchData();
  }, [fetchReferralStats, fetchPayouts, fetchStripeConnectStatus, toast]);

  // Handle payout request
  const handleRequestPayout = async () => {
    if (!payoutAmount || isNaN(parseFloat(payoutAmount)) || parseFloat(payoutAmount) <= 0) {
      toast({
        title: 'Invalid amount',
        description: 'Please enter a valid payout amount',
        variant: 'destructive',
      });
      return;
    }
    
    const amount = parseFloat(payoutAmount);
    
    if (amount > availableBalance) {
      toast({
        title: 'Insufficient balance',
        description: `Your available balance is ${formatCurrency(availableBalance)}`,
        variant: 'destructive',
      });
      return;
    }
    
    if (amount < minimumPayout) {
      toast({
        title: 'Amount too low',
        description: `Minimum payout amount is ${formatCurrency(minimumPayout)}`,
        variant: 'destructive',
      });
      return;
    }
    
    setPayoutLoading(true);
    
    try {
      const result = await requestPayout(amount);
      
      if (!result.success) {
        throw new Error(result.error || 'Failed to request payout');
      }
      
      toast({
        title: 'Success',
        description: 'Payout requested successfully',
      });
      
      // Refresh data
      setPayoutAmount('');
      setIsPayoutModalOpen(false);
      
      // Refresh all data
      await refreshStats();
      
    } catch (error) {
      console.error('Error requesting payout:', error);
      toast({
        title: 'Error',
        description: error instanceof Error ? error.message : 'Failed to request payout',
        variant: 'destructive',
      });
    } finally {
      setPayoutLoading(false);
    }
  };

  // Handle refresh of all data
  const handleRefresh = async () => {
    setRefreshKey(prev => prev + 1);
    await refreshStats();
  };

  // Get status badge
  const getStatusBadge = (status: string) => {
    switch (status) {
      case 'completed':
        return <Badge variant="success">Completed</Badge>;
      case 'failed':
        return <Badge variant="destructive">Failed</Badge>;
      case 'processing':
        return <Badge variant="secondary">Processing</Badge>;
      case 'pending':
      default:
        return <Badge variant="outline">Pending</Badge>;
    }
  };

  // Calculate earnings and stats
  const totalEarned = stats?.totalEarned || 0;
  const pendingEarnings = stats?.pendingEarnings || 0;
  const totalReferrals = stats?.totalReferrals || 0;
  const activeReferrals = stats?.activeReferrals || 0;
  const recentReferrals = stats?.recentReferrals || [];

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="max-w-6xl mx-auto space-y-8">
        <h1 className="text-3xl font-bold text-foreground">Referral Program</h1>
        
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Left Column - Stats and Referral Link */}
          <div className="space-y-6 lg:col-span-1">
            <Card>
              <CardHeader>
                <CardTitle>Your Referral Stats</CardTitle>
                <CardDescription>Track your referral performance</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-1">
                  <div className="flex justify-between items-center">
                    <span className="text-sm font-medium text-muted-foreground">Total Earned</span>
                    <span className="font-medium">{formatCurrency(totalEarned)}</span>
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="text-sm font-medium text-muted-foreground">Pending</span>
                    <span className="text-amber-500 font-medium">{formatCurrency(pendingEarnings)}</span>
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="text-sm font-medium text-muted-foreground">Total Referrals</span>
                    <span className="font-medium">{totalReferrals}</span>
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="text-sm font-medium text-muted-foreground">Active Referrals</span>
                    <span className="font-medium text-green-500">{activeReferrals}</span>
                  </div>
                </div>
              </CardContent>
            </Card>
            
            <Card>
              <CardHeader>
                <CardTitle>Your Referral Link</CardTitle>
                <CardDescription>Share this link to earn rewards</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="flex items-center space-x-2">
                  <Input
                    value={referralLink}
                    readOnly
                    className="flex-1"
                    onClick={(e) => (e.target as HTMLInputElement).select()}
                  />
                  <Button
                    variant="outline"
                    size="icon"
                    onClick={() => copyToClipboard(referralLink, 'Referral link copied!')}
                  >
                    <Copy className="h-4 w-4" />
                  </Button>
                </div>
                <Button className="w-full" onClick={handleShare}>
                  <Share2 className="mr-2 h-4 w-4" /> Share
                </Button>
              </CardContent>
            </Card>
          </div>

          {/* Middle Column - Payouts */}
          <div className="space-y-6 lg:col-span-2">
            <PayoutAccountStatus
              account={stripeConnectAccount}
              availableBalance={availableBalance}
              minimumPayout={minimumPayout}
              isLoading={isLoadingStripeStatus}
              isConnecting={isConnectingStripe}
              onConnect={handleConnectStripe}
              onRequestPayout={() => setIsPayoutModalOpen(true)}
            />

            <PayoutHistory
              payouts={payouts}
              availableBalance={availableBalance}
              minimumPayout={minimumPayout}
              isLoading={payoutLoading}
              onRefresh={handleRefresh}
            />
            
            {/* Recent Referrals */}
            <Card>
              <CardHeader>
                <CardTitle>Recent Referrals</CardTitle>
                <CardDescription>Your most recent referred users</CardDescription>
              </CardHeader>
              <CardContent>
                {recentReferrals.length === 0 ? (
                  <div className="text-center py-8">
                    <Users className="mx-auto h-8 w-8 text-muted-foreground mb-2" />
                    <p className="text-sm text-muted-foreground">No recent referrals</p>
                  </div>
                ) : (
                  <div className="space-y-4">
                    {recentReferrals.map((ref: ReferralItem) => (
                      <div key={ref.id} className="flex items-center justify-between">
                        <div className="flex items-center space-x-3">
                          <div className="flex-shrink-0 h-10 w-10 rounded-full bg-muted flex items-center justify-center">
                            <Users className="h-5 w-5 text-muted-foreground" />
                          </div>
                          <div>
                            <p className="text-sm font-medium">
                              {ref.email || `User ${ref.userId.substring(0, 6)}`}
                            </p>
                            <p className="text-xs text-muted-foreground">
                              {format(new Date(ref.createdAt), 'MMM d, yyyy')}
                            </p>
                          </div>
                        </div>
                        <div className="flex items-center space-x-2">
                          {ref.status === 'completed' ? (
                            <Badge variant="success">
                              <Check className="h-3 w-3 mr-1" />
                              Active
                            </Badge>
                          ) : (
                            <Badge variant="outline">
                              <Clock className="h-3 w-3 mr-1" />
                              Pending
                            </Badge>
                          )}
                          {ref.rewardAmount && ref.status === 'completed' && (
                            <Badge variant="secondary">
                              +{formatCurrency(ref.rewardAmount)}
                            </Badge>
                          )}
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </CardContent>
              {recentReferrals.length > 0 && (
                <CardFooter className="border-t px-6 py-3">
                  <Button variant="ghost" size="sm" className="ml-auto" onClick={handleRefresh} disabled={loading}>
                    {loading ? (
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    ) : (
                      <ArrowUpRight className="mr-2 h-4 w-4" />
                    )}
                    View All
                  </Button>
                </CardFooter>
              )}
            </Card>
          </div>
        </div>
      </div>
      
      {/* Payout Request Modal */}
      <PayoutRequestModal
        isOpen={isPayoutModalOpen}
        onClose={() => setIsPayoutModalOpen(false)}
        availableBalance={availableBalance}
        minimumPayout={minimumPayout}
        onPayoutRequested={handleRequestPayout}
        isConnected={stripeConnectAccount?.payoutsEnabled === true}
        onConnectStripe={handleConnectStripe}
        isConnectingStripe={isConnectingStripe}
      />
    </div>
  );
};

export default Referrals;
